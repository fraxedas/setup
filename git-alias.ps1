git config --global alias.lg "log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)' --all"
git config --global alias.done '!f() { BR=$(git rev-parse --abbrev-ref HEAD); if [ "$BR" != "master" ]; then echo "[*] Current branch: $BR"; echo "[>] Switching to master..."; git checkout master && echo "[>] Pulling latest changes..."; git pull origin master && echo "[>] Pruning remote-tracking branches..."; git fetch --prune && echo "[x] Deleting branch: $BR"; git branch -D "$BR"; else echo "[!] You are on master - not deleting it."; fi; }; f'
git config --global alias.rom '!f() { BR=$(git rev-parse --abbrev-ref HEAD); echo "[*] Saving current branch: $BR"; git fetch origin && echo "[>] Switching to master..."; git checkout master && echo "[>] Pulling latest changes..."; git pull origin master && echo "[>] Switching back to $BR..."; git checkout "$BR" && echo "[>] Rebasing $BR onto origin/master..."; git rebase origin/master; }; f'
git config --global alias.sync '!f() { BR=$(git rev-parse --abbrev-ref HEAD); if [ "$BR" = "master" ]; then echo "[x] Refusing to force-push to master."; exit 1; fi; echo "[>] Fetching latest from origin/$BR..."; git fetch origin "$BR"; echo "[>] Pushing with --force-with-lease..."; git push --force-with-lease origin "$BR"; }; f'
git config --global alias.make '!f() { BR="oscarfr/$1"; if git rev-parse --verify "$BR" >/dev/null 2>&1; then echo "[*] Switching to existing branch: $BR"; git checkout "$BR"; else echo "[>] Creating and switching to new branch: $BR"; git checkout -b "$BR"; echo "[>] Pushing branch and setting upstream to origin/$BR"; git push -u origin "$BR"; fi; }; f'
git config --global alias.comment '!f() { comments=( '\''These aren’t the failing tests you’re looking for – Obi-Wan Kenobi'\'' '\''Test or test not. There is no skip – Yoda'\'' '\''I find your lack of tests disturbing – Darth Vader'\'' '\''May the tests be with you – Rebel Alliance'\'' '\''It’s a test trap! – Admiral Ackbar'\'' '\''Help me, tests. You’re my only hope – Princess Leia'\'' '\''Only a Sith deals in skipped tests – Obi-Wan Kenobi'\'' '\''The tests strike back – Narrator of the Saga'\'' '\''Stay on target... with full test coverage – Gold Leader'\'' '\''The tests are strong with this one – Darth Vader'\'' '\''I am your tester – Darth Vader'\'' '\''You were the chosen one! You were supposed to write the tests! – Obi-Wan Kenobi'\'' '\''I’ve added more tests than a Death Star has stormtroopers – Han Solo'\'' '\''The force is flaky with this test – Mace Windu'\'' '\''This test is our only hope – Princess Leia'\'' ); count=${#comments[@]}; index=$((RANDOM % count)); echo "${comments[$index]}"; }; f'
git config --global alias.get '!f() { BR="$1"; if [ -z "$BR" ]; then echo "Usage: git get <branch-name>"; exit 1; fi; echo "[*] Fetching origin/$BR..."; git fetch origin "$BR" && echo "[>] Checking out $BR and setting upstream..."; git checkout -b "$BR" --track "origin/$BR"; }; f'
git config --global alias.top "!f() { FROM=$(date +%Y-%m-01); UNTIL=\"\"; COUNT=10; for arg in \"$@\"; do case $arg in from=*) FROM=${arg#*=} ;; until=*) UNTIL=${arg#*=} ;; count=*) COUNT=${arg#*=} ;; esac; done; echo \"Git Top Contributors\"; echo \"From: $FROM  Until: ${UNTIL:-(now)}  Count: $COUNT\"; RANGE=\"--since='$FROM'\"; [ -n \"$UNTIL\" ] && RANGE=\"$RANGE --until='$UNTIL'\"; git log $RANGE --format='%an <%ae>' | sort | uniq -c | sort -rn | head -n $COUNT | awk '{ count=$1; $1=\"\"; printf \"%-5s %s\\n\", count, substr($0,2) }'; }; f"
